import React, { useState, useEffect } from 'react';
import { X, FileText, AlertCircle } from 'lucide-react';
import {
  BillingFeeAgreement,
  BillingFeeAgreementFormData,
  BillingFeeAgreementStatus,
  BillingFrequency,
  BillingMethod
} from '../types/BillingFeeAgreement';

interface BillingFeeAgreementFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (agreement: BillingFeeAgreementFormData) => void;
  agreement: BillingFeeAgreement | null;
}

const BillingFeeAgreementFormModal: React.FC<BillingFeeAgreementFormModalProps> = ({
  isOpen,
  onClose,
  onSave,
  agreement
}) => {
  // Mock data - in production, these would come from API/state
  const mockFeeSchedules = [
    { id: 'FS-001', code: 'FS34', name: 'Standard Tiered' },
    { id: 'FS-002', code: 'FS35', name: 'Premium Flat' },
    { id: 'FS-003', code: 'FS36', name: 'Corporate Standard' }
  ];

  const mockRelationships = [
    { id: 'REL-001', name: 'Johnson Extended Family' },
    { id: 'REL-002', name: 'Smith Multi-Gen Trust' }
  ];

  const mockClients = [
    { id: '1', name: 'John Smith' },
    { id: '2', name: 'Mary Johnson' },
    { id: '3', name: 'Tech Startup LLC' }
  ];

  const [formData, setFormData] = useState<BillingFeeAgreementFormData>({
    agreementNumber: '', // Will be auto-generated by database
    status: BillingFeeAgreementStatus.ACTIVE,
    feeScheduleId: '',
    billingFrequency: BillingFrequency.QUARTERLY,
    billingMethod: BillingMethod.ARREARS,
    householdIds: [],
    accountIds: [],
    effectiveDate: new Date(),
    relationshipId: undefined,
    primaryContactClientId: undefined,
    customFeeAdjustment: undefined,
    notes: ''
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (agreement) {
      setFormData({
        id: agreement.id,
        agreementNumber: agreement.agreementNumber,
        status: agreement.status,
        feeScheduleId: agreement.feeScheduleId,
        billingFrequency: agreement.billingFrequency,
        billingMethod: agreement.billingMethod,
        billingDay: agreement.billingDay,
        relationshipId: agreement.relationshipId,
        householdIds: agreement.householdIds,
        accountIds: agreement.accountIds,
        primaryContactClientId: agreement.primaryContactClientId,
        customFeeAdjustment: agreement.customFeeAdjustment,
        customFeeAdjustmentNotes: agreement.customFeeAdjustmentNotes,
        effectiveDate: agreement.effectiveDate,
        terminationDate: agreement.terminationDate,
        notes: agreement.notes || '',
        internalNotes: agreement.internalNotes
      });
    } else {
      setFormData({
        agreementNumber: '', // Will be auto-generated
        status: BillingFeeAgreementStatus.ACTIVE,
        feeScheduleId: '',
        billingFrequency: BillingFrequency.QUARTERLY,
        billingMethod: BillingMethod.ARREARS,
        householdIds: [],
        accountIds: [],
        effectiveDate: new Date(),
        relationshipId: undefined,
        primaryContactClientId: undefined,
        customFeeAdjustment: undefined,
        notes: ''
      });
    }
    setErrors({});
  }, [agreement, isOpen]);

  const handleChange = (field: keyof BillingFeeAgreementFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error for this field
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  const validate = (): boolean => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.feeScheduleId) {
      newErrors.feeScheduleId = 'Fee schedule is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (validate()) {
      onSave(formData);
    }
  };

  if (!isOpen) return null;

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000,
      padding: '20px'
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        width: '700px',
        maxWidth: '100%',
        maxHeight: '90vh',
        display: 'flex',
        flexDirection: 'column'
      }}>
        {/* Header */}
        <div style={{
          padding: '24px',
          borderBottom: '1px solid #e0e0e0',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <div style={{
              width: '40px',
              height: '40px',
              borderRadius: '50%',
              backgroundColor: '#e3f2fd',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              <FileText size={20} color="#2196f3" />
            </div>
            <h2 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0 }}>
              {agreement ? 'Edit Billing Fee Agreement' : 'Add New Billing Fee Agreement'}
            </h2>
          </div>
          <button
            onClick={onClose}
            style={{
              padding: '8px',
              backgroundColor: 'transparent',
              border: 'none',
              cursor: 'pointer',
              borderRadius: '4px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
            <X size={20} color="#666" />
          </button>
        </div>

        {/* Content */}
        <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', flex: 1, overflow: 'hidden' }}>
          <div style={{ padding: '24px', overflowY: 'auto', flex: 1 }}>
            {/* Basic Information */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px', color: '#333' }}>
                Basic Information
              </h3>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>
                {agreement && (
                  <div>
                    <label style={{
                      display: 'block',
                      fontSize: '13px',
                      fontWeight: 'bold',
                      marginBottom: '8px',
                      color: '#333'
                    }}>
                      Agreement Number
                    </label>
                    <input
                      type="text"
                      value={formData.agreementNumber}
                      disabled
                      style={{
                        width: '100%',
                        padding: '10px',
                        border: '1px solid #ddd',
                        borderRadius: '6px',
                        fontSize: '14px',
                        backgroundColor: '#f5f5f5',
                        color: '#666',
                        cursor: 'not-allowed'
                      }}
                    />
                    <p style={{ fontSize: '11px', color: '#999', marginTop: '4px' }}>
                      Auto-generated
                    </p>
                  </div>
                )}

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '13px',
                    fontWeight: 'bold',
                    marginBottom: '8px',
                    color: '#333'
                  }}>
                    Status
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => handleChange('status', e.target.value as BillingFeeAgreementStatus)}
                    style={{
                      width: '100%',
                      padding: '10px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '14px'
                    }}
                  >
                    <option value={BillingFeeAgreementStatus.ACTIVE}>Active</option>
                    <option value={BillingFeeAgreementStatus.PENDING}>Pending</option>
                    <option value={BillingFeeAgreementStatus.INACTIVE}>Inactive</option>
                    <option value={BillingFeeAgreementStatus.TERMINATED}>Terminated</option>
                  </select>
                </div>
              </div>

              <div>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Effective Date *
                </label>
                <input
                  type="date"
                  value={formData.effectiveDate ? new Date(formData.effectiveDate).toISOString().split('T')[0] : ''}
                  onChange={(e) => handleChange('effectiveDate', e.target.value ? new Date(e.target.value) : new Date())}
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                />
              </div>
            </div>

            {/* Fee Configuration */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px', color: '#333' }}>
                Fee Configuration
              </h3>

              <div style={{ marginBottom: '16px' }}>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Fee Schedule *
                </label>
                <select
                  value={formData.feeScheduleId}
                  onChange={(e) => handleChange('feeScheduleId', e.target.value)}
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: `1px solid ${errors.feeScheduleId ? '#f44336' : '#ddd'}`,
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                >
                  <option value="">Select fee schedule...</option>
                  {mockFeeSchedules.map(schedule => (
                    <option key={schedule.id} value={schedule.id}>
                      {schedule.code} - {schedule.name}
                    </option>
                  ))}
                </select>
                {errors.feeScheduleId && (
                  <div style={{ display: 'flex', alignItems: 'center', gap: '4px', marginTop: '4px', color: '#f44336', fontSize: '12px' }}>
                    <AlertCircle size={14} />
                    {errors.feeScheduleId}
                  </div>
                )}
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '13px',
                    fontWeight: 'bold',
                    marginBottom: '8px',
                    color: '#333'
                  }}>
                    Billing Frequency
                  </label>
                  <select
                    value={formData.billingFrequency}
                    onChange={(e) => handleChange('billingFrequency', e.target.value as BillingFrequency)}
                    style={{
                      width: '100%',
                      padding: '10px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '14px'
                    }}
                  >
                    <option value={BillingFrequency.QUARTERLY}>Quarterly</option>
                    <option value={BillingFrequency.SEMI_ANNUAL}>Semi-Annual</option>
                    <option value={BillingFrequency.ANNUAL}>Annual</option>
                    <option value={BillingFrequency.MONTHLY}>Monthly</option>
                  </select>
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '13px',
                    fontWeight: 'bold',
                    marginBottom: '8px',
                    color: '#333'
                  }}>
                    Billing Method
                  </label>
                  <select
                    value={formData.billingMethod}
                    onChange={(e) => handleChange('billingMethod', e.target.value as BillingMethod)}
                    style={{
                      width: '100%',
                      padding: '10px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '14px'
                    }}
                  >
                    <option value={BillingMethod.ARREARS}>Arrears</option>
                    <option value={BillingMethod.ADVANCE}>Advance</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Scope */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px', color: '#333' }}>
                Scope
              </h3>

              <div style={{ marginBottom: '16px' }}>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Relationship (Optional)
                </label>
                <select
                  value={formData.relationshipId || ''}
                  onChange={(e) => handleChange('relationshipId', e.target.value || undefined)}
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                >
                  <option value="">No relationship</option>
                  {mockRelationships.map(rel => (
                    <option key={rel.id} value={rel.id}>
                      {rel.name}
                    </option>
                  ))}
                </select>
                <p style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>
                  Link this agreement to a relationship for better organization
                </p>
              </div>

              <div>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Primary Contact (Optional)
                </label>
                <select
                  value={formData.primaryContactClientId || ''}
                  onChange={(e) => handleChange('primaryContactClientId', e.target.value || undefined)}
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                >
                  <option value="">Select primary contact...</option>
                  {mockClients.map(client => (
                    <option key={client.id} value={client.id}>
                      {client.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Fee Adjustment */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px', color: '#333' }}>
                Fee Adjustment (Optional)
              </h3>

              <div style={{ marginBottom: '16px' }}>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Custom Fee Adjustment (%)
                </label>
                <input
                  type="number"
                  step="0.01"
                  value={formData.customFeeAdjustment || ''}
                  onChange={(e) => handleChange('customFeeAdjustment', e.target.value ? parseFloat(e.target.value) : undefined)}
                  placeholder="e.g., -10 for 10% discount"
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                />
                <p style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>
                  Enter negative value for discount, positive for increase
                </p>
              </div>

              <div>
                <label style={{
                  display: 'block',
                  fontSize: '13px',
                  fontWeight: 'bold',
                  marginBottom: '8px',
                  color: '#333'
                }}>
                  Adjustment Notes
                </label>
                <textarea
                  value={formData.customFeeAdjustmentNotes || ''}
                  onChange={(e) => handleChange('customFeeAdjustmentNotes', e.target.value)}
                  placeholder="Reason for fee adjustment..."
                  rows={2}
                  style={{
                    width: '100%',
                    padding: '10px',
                    border: '1px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px',
                    fontFamily: 'inherit',
                    resize: 'vertical'
                  }}
                />
              </div>
            </div>

            {/* Notes */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '13px',
                fontWeight: 'bold',
                marginBottom: '8px',
                color: '#333'
              }}>
                Notes
              </label>
              <textarea
                value={formData.notes}
                onChange={(e) => handleChange('notes', e.target.value)}
                placeholder="Additional notes about this billing agreement..."
                rows={3}
                style={{
                  width: '100%',
                  padding: '10px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '14px',
                  fontFamily: 'inherit',
                  resize: 'vertical'
                }}
              />
            </div>
          </div>

          {/* Footer */}
          <div style={{
            padding: '16px 24px',
            borderTop: '1px solid #e0e0e0',
            display: 'flex',
            gap: '12px',
            justifyContent: 'flex-end'
          }}>
            <button
              type="button"
              onClick={onClose}
              style={{
                padding: '10px 24px',
                border: '1px solid #ddd',
                background: 'white',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold',
                color: '#666'
              }}
            >
              Cancel
            </button>
            <button
              type="submit"
              style={{
                padding: '10px 24px',
                border: 'none',
                background: '#2196f3',
                color: 'white',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold'
              }}
            >
              {agreement ? 'Save Changes' : 'Create Agreement'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default BillingFeeAgreementFormModal;
